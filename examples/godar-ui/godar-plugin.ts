import { Plugin } from 'swagger-codegen-alpha';
import { ParameterType } from 'swagger-codegen-alpha/lib/Parser';
import { parseParametersInfo, useAddToWritePartition, wrap } from 'swagger-codegen-alpha/lib/plugin-helpers';
import * as path from 'path';

interface GodarPluginProps {
  tagNamesToInclude: string[];
  generatedDirectoryPath: string;
}

export default function({ tagNamesToInclude, generatedDirectoryPath }: GodarPluginProps): Plugin {
  return {
    imports: [
      '// @flow',
      `/**
 * WARNING:
 * This file is generated by swagger code generator,
 * Do not make change to it manually because your changes will override over next generate command,
 * Consider using 'npm run codegen'.
 */`,
      'import { APIVersionController } from "src/controller/APIVersionController";',
    ],

    main: () => ([url]) => ([method, pathProps]) => {
      const [addToDefinition, addToController] = useAddToWritePartition(['Definition', 'Controller']);

      const { tags, summary, operationId, parameters } = pathProps;

      const paramsInfo = parseParametersInfo(parameters);

      tags?.forEach(tag => {
        if (tagNamesToInclude.includes(tag)) {
          const FILE_PATH = path.resolve(generatedDirectoryPath, `${tag}.js`),
            CONTROLLER_NAME = capitalizeFirstLetter(hypensToCamelCase(tag)),
            METHOD_NAME = summary || operationId,
            METHOD_PROPS_NAME = `${capitalizeFirstLetter(summary || operationId || '')}Props`,
            CONTROLLER_INSTANCE_NAME = hypensToCamelCase(tag),
            URL = removeVersionFromUrl(url);

          switch (method) {
            case 'get':
              addToDefinition(
                FILE_PATH,
                wrap(
                  `interface ${METHOD_PROPS_NAME} {`,

                  paramsToInterfaceContent(paramsInfo, 'query'),

                  `};`,
                ),
              );

              addToController(
                FILE_PATH,

                wrap(
                  `class ${CONTROLLER_NAME} extends APIVersionController {`,

                  wrap(
                    `// @query
                  ${METHOD_NAME} = (apiCallerConfig) => (key, params: ${METHOD_PROPS_NAME}) => {`,

                    `const { apiCaller, makeURL } = this;

                   return apiCaller(apiCallerConfig).get(makeURL('${URL}', { params }));`,

                    `}`,
                  ),

                  `}

                  export const ${CONTROLLER_INSTANCE_NAME} = new ${CONTROLLER_NAME}();
                  `,
                ),
              );
              break;

            case 'post':
              addToDefinition(
                FILE_PATH,
                wrap(
                  `interface ${METHOD_PROPS_NAME} {`,

                  paramsToInterfaceContent(paramsInfo, 'body'),

                  `};`,
                ),
              );

              addToController(
                FILE_PATH,

                wrap(
                  `class ${CONTROLLER_NAME} extends APIVersionController {`,

                  wrap(
                    `// @mutation
                  ${METHOD_NAME} = (apiCallerConfig) => (body: ${METHOD_PROPS_NAME}) => {`,

                    `const { apiCaller, makeURL } = this;
                    
                  return apiCaller(apiCallerConfig).post(makeURL('${URL}'), body);`,

                    `}`,
                  ),

                  `}

                  export const ${CONTROLLER_INSTANCE_NAME} = new ${CONTROLLER_NAME}();
                  `,
                ),
              );
              break;

            case 'put':
              addToDefinition(
                FILE_PATH,
                wrap(
                  `interface ${METHOD_PROPS_NAME} {`,

                  paramsToInterfaceContent(paramsInfo, 'body'),

                  `};`,
                ),
              );

              addToController(
                FILE_PATH,

                wrap(
                  `class ${CONTROLLER_NAME} extends APIVersionController {`,

                  wrap(
                    `// @mutation
                  ${METHOD_NAME} = (apiCallerConfig) => (body: ${METHOD_PROPS_NAME}) => {`,

                    `const { apiCaller, makeURL } = this;
                    
                  return apiCaller(apiCallerConfig).put(makeURL('${URL}'), body);`,

                    `}`,
                  ),

                  `}

                  export const ${CONTROLLER_INSTANCE_NAME} = new ${CONTROLLER_NAME}();
                  `,
                ),
              );
              break;

            case 'delete':
              addToDefinition(
                FILE_PATH,
                wrap(
                  `interface ${METHOD_PROPS_NAME} {`,

                  paramsToInterfaceContent(paramsInfo, 'query'),

                  `};`,
                ),
              );

              addToController(
                FILE_PATH,

                wrap(
                  `class ${CONTROLLER_NAME} extends APIVersionController {`,

                  wrap(
                    `// @mutation
                  ${METHOD_NAME} = (apiCallerConfig) => (key, params: ${METHOD_PROPS_NAME}) => {`,

                    `const { apiCaller, makeURL } = this;

                   return apiCaller(apiCallerConfig).delete(makeURL('${URL}', { params }));`,

                    `}`,
                  ),

                  `}

                  export const ${CONTROLLER_INSTANCE_NAME} = new ${CONTROLLER_NAME}();
                  `,
                ),
              );

              break;
          }
        }
      });
    },
  };
}

function removeVersionFromUrl(url: string, versionKeyWord = 'v1') {
  const splitURL = url.split('/');

  if (splitURL[1] === versionKeyWord) {
    splitURL.splice(1, 1);
  }

  return splitURL.join('/');
}

function hypensToCamelCase(str: string) {
  return str.replace(/-([a-z])/g, g => g[1].toUpperCase());
}

function capitalizeFirstLetter(str: string) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

function paramsToInterfaceContent(paramsInfo: ReturnType<typeof parseParametersInfo>, paramType: ParameterType) {
  let targetParams = paramsInfo[paramType];

  if (paramType === 'body' && Array.isArray(targetParams[0]?.type)) {
    //@ts-ignore
    targetParams = targetParams[0].type;
  }

  return targetParams.reduce(
    (acc, q) => (q ? acc.concat(`${q.name}: ${!q.required ? '?' : ''} ${q.type};\n`) : acc),

    '',
  );
}
